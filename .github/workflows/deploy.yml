# This is a basic workflow to help you get started with Actions

name: Deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  # todo remove this after testing
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# TODO
# either move back to private repo and setup vault management (no worry aobut public, ask connor his thoughts)
  # free has more control over brnach which will make deployments better
# keep open and free and use ssh key with better protections, likely

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      # repo assumed cloned, otherwise login and clone first time
      # git clone git@github.com.whalenet.psql-db:whale-net/psql-db.git
      # using deploy key on server with .ssh/config
      - name: pull repo on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.WHALE_NET_PROD_IP }}
          username: ${{ secrets.WHALE_NET_PROD_DEPLOY_USERNAME }}
          key: ${{ secrets.WHALE_NET_PROD_SSH_PRIVATE_KEY }}
          port: ${{ secrets.WHALE_NET_PROD_SSH_PORT }}
          # unsure if I need to checkout specific sha, but probably not a bad idea in case many pushes to master
          # if local is ever chagned or we have merge conflict, may be tricky, can use rsync in that case I guess
          # but we'll cross that bridge if we ever get there
          script: |
            cd psql-db
            git fetch origin
            git checkout ${{ github.sha }}

      - name: run docker compose on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.WHALE_NET_PROD_IP }}
          username: ${{ secrets.WHALE_NET_PROD_DEPLOY_USERNAME }}
          key: ${{ secrets.WHALE_NET_PROD_SSH_PRIVATE_KEY }}
          port: ${{ secrets.WHALE_NET_PROD_SSH_PORT }}
          # unsure if chmod is good idea, but whatever
          script: |
            cd psql-db
            chmod +x ./scripts/deploy
            ./scripts/deploy

